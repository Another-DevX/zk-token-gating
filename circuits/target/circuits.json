{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":12043745244669099266,"abi":{"parameters":[{"name":"address","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+2azW6bQBCAAYNtHDt2ftrkFKm3tifwgsG3HHpunwHHdpRLVFWReuW9emnfrEbdwcN0aOt6RuGQkdACO3zzs8NmYtt1fom7Ozx77qN7MMK5Q+Zu7RgdJ7EgK+L8pv6LB+AilokWSbLJ5pvYxEU0X67yNErS1SKP8zjN0/U8N2aTJ3m2XC2zaBknZhNv06XZogD8NscZAZ0fdgzt6KH5nmCsIbEryc+jZBEy8Qn6b0KnWfAa+QGmAj8aWM6Hcs+nsUAduHrrlCjHGU9IbA6KBWz7Orbn3MbRI/ew/ZGjW1MusQf+0PzA+QR0yr0/Lpnzy9/jgLmgbMZRyXB33CA9Wlse0nuHzt87TR88JgaXiUGzvnb1myrXUMytAV0fv2zaxnN4DXyUzxuSH42aw/nRer8vnPa9C+phUDq19Eg+cY4gZ0OsT+ZCNOeXTTsje+0jO5gFfgRE/629ntqxj56B52eM/T6x3/CbuYdzRFk95h7o93fHG3t+Yo+qhr4h3iHvJLz3PTTX9T1Zq37/tCf3mNyN7VHJ/ebp4/bp09fHh8d72rByDTiex9Km4/0HY+rw/QJ+jua+rU5mLc9XwvUluH+OjpIs4vZFQX7C1bkcf3EH/EDH/znw+zr+1/kZ6PBXwB/q5GcN/FCFb+r/D0Y6+cmAf6LCn9f1Odbxv87PRIe/Af6pTn7q92uq4/8C+DMdfg78Mx1+3Veeq/CzJfAvVPimAP6lTn5q/1/p5GcFPdxrZy/0b/MVui/XM5nkX3s4sD8ivmr1cFfEH5of2v9eM77OmDm6hteMnWvGDsc6FWQNBFmXgqyJIKsvyJLM/UVH/RoLsoKOsiRjPBdkSa7jSUf98gVZZ4IsyT1nJMjyBFkzQVZX98JQkNXVd0iyJiT3L1eQJflud7VWX/rC59ujX/rCw1hTQZZkTUjuE5K9SVfra6jA4j7Lr+TWjtGRwn2WL8g/+Dsc0A8Yfe7zgjHS/fzl4fHJIYINu4yhtl9jAdSQ590WLp3/2xxcG0aX+/IfklU1TtCI+WVz/tbej46QLN//wgu+4A2c5mI5xH5A9L/ba9ysw+gf4ec2K+KtKbZFWqzXyV1xTviVeChPPwEnXIh4ficAAA==","debug_symbols":"zdzNbtpAGIXhe/Haizkzn+eHW6mqyIATWbIMMlCpQtx77QrSJmHjTfTuGDyffQDx7M5cq323vby99OPr4VRtflyr4bBrz/1hnFfXyv1963Rsx2V1OrfTudoouLrqxv38qmludfXaD121ibr9rCs9G/DO7gNe5cPAvNhO/TD0by+fn3utLDy7mb3fzHz49HSz1RPN6om4eiKtnsirJ8raicatntDqCb964vlv7stjwuL/E/WXraWJ960l5/etvqzZuuQwSI4GkiNCciRIjgzJURg5ooPkECSHh+SAeBohnkaIpxHiaYR4GiGeRoinCeJpgniaIJ4miKcJ4mmCeJogniaIpwniaYJ4miGeZoinGeJphniaIZ5miKcZ4mmGeJohnmaIpwXiaYF4WiCeFoinBeJpgXhaIJ4WiKcF4mmBeCoHAVUOIqochFQ5iKlyEFTlIKrKQViVg7gqB4FVjiKrKLKKIqsosooiqyiyiiKrKLKKIqsosooiq6fI6imyeoqsniKrp8jqKbJ6iqyeIqunyOopsgaKrIEia6DIGiiyBoqsgSJroMgaKLIGiqyBIqtRZDWKrEaR1SiyGkVWo8hqFFmNIqtRZDWKrA1F1oYia0ORldKqEqVWJUqvSpRilSjNKlGqVaJ0q0QpV4nSrhKlXiVKv0qUgpUoDStRKlaidKxEKVmJ0rISpWYlSs9KlKKVKE0rUapWonStRClbidK2EqVuJUrfSt9ZuMry963Zmi9BRAniKUECJYgRgtzm1a926tvt0C2HDy0XL+PucRbRvDz/Pj6uPE4rOk6HXbe/TN1ybtG/I4uWbza42tzy8ZZ/gHKqVfz8kPlBfwA=","file_map":{"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"fn main(address: Field) {\n    // Safety: We are using an unsafe function to get the NFT owning status\n    let owns_nft = unsafe { get_nft_owning([address]) };\n    let nft_status = owns_nft[0];\n    assert(nft_status == 1);\n}\n\n#[oracle(getNftOwning)]\nunconstrained fn nft_owning(address: [Field; 1]) -> [Field; 1] {}\n\nunconstrained fn get_nft_owning(address: [Field; 1]) -> [Field; 1] {\n    let response = nft_owning(address);\n    println(response);\n    response\n}\n\n#[test]\nfn test_nft_owning() {\n    let address = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;\n    println(1);\n    main(address);\n}\n","path":"/mnt/ubuntu/home/anotherdev/workspace/personal/noir/zk_token_gating/circuits/src/main.nr"}},"names":["main"],"brillig_names":["get_nft_owning"]}